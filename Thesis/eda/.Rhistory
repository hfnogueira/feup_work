summarise(value = mean(value))
df_sm %>%
filter(region == 'rdd') %>%
group_by(Month, region, Year) %>%
summarise(value = mean(value), .groups = 'drop')
df_sm %>%
filter(region == 'rdd') %>%
group_by(Month, region, Year) %>%
summarise(value = mean(value), .groups = 'drop') %>%
ggseasonplot(ts(value, start = c(min(Year))frequency = 12),
ggseasonplot(ts(value, start = c(min(Year),frequency = 12),
df_sm %>%
filter(region == 'rdd') %>%
group_by(Month, region, Year) %>%
summarise(value = mean(value), .groups = 'drop') %>%
ggseasonplot(ts(value, start = c(min(Year)),frequency = 12),
year.labels = TRUE,
year.labels.left = TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
df_sm %>%
library(forecast)
library(fpp2)
library(tidyverse)
library(xts)
library(tsbox)
library(plotly)
library(hrbrthemes)
dataPrep_rdd <- read_csv(file = '../data/dataPrep_meteo_rdd.csv') %>% mutate(var = 'rdd')
dataPrep_rvv <- read_csv(file = '../data/dataPrep_meteo_rvv.csv') %>% mutate(var = 'rvv')
df <-
rbind(dataPrep_rdd, dataPrep_rvv) %>%
mutate(Year = lubridate::year(Date))
df
library(ggplot2)
library(ggridges)
theme_set(theme_minimal())
## ------- function to plot densitys
plot_density_ <- function(df = df, Year = 1041,  v = 'Tmax' , bins = 10) {
df %>%
#filter(var == region, Year < 1940) %>%
filter(Year >= Year) %>%
select(var, eval(v), Year, var) %>%
rename(region = var,
value = eval(v)) %>%
mutate(my_bins = cut(Year, breaks = ceiling(n_distinct(Year) / bins))) %>%
ggplot(aes(
x =  value,
y = as.factor(my_bins),
fill = region,
color = region
)) +
geom_density_ridges(,
alpha = .2) +
#facet_wrap(~region) +
labs(
title = paste('variable', eval(v), 'evolution in ', bins , ' years groups'),
x = eval(v),
y = 'Years'
) +
theme_ipsum()
}
## ------- function to plot time seres
plot_ts_meteo_ <- function(df = df,  v = v, scaleLimits = 5) {
p <-
df %>%
select(var, eval(v), Year, var) %>%
rename(region = var,
value = eval(v)) %>%
group_by(Year, region) %>%
#summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
summarise(value = median(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = scaleLimits ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Median',v,'evolution in both regions'))
# Turn it interactive with ggplotly
ggplotly(p)
}
bins = 9
Year = 1041
v = 'Tmed'
plot_density_(df = df, Year = Year,  v = v , bins = bins)
plot_ts_meteo_(df = df,  v = v, scaleLimits = 5)
bins = 9
Year = 1041
v = 'Rain'
p <-
df %>%
select(var, eval(v), Year, var) %>%
rename(region = var,
value = eval(v)) %>%
group_by(Year, region) %>%
#summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
summarise(value = sum(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = 0 ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Total ',v,' per year in both regions'))
# Turn it interactive with ggplotly
ggplotly(p)
bins = 9
Year = 1041
v = 'Sm'
plot_density_(df = df, Year = Year,  v = v , bins = bins)
plot_ts_meteo_(df = df,  v = v, scaleLimits = 5)
v = 'Sm'
data_xts <-
df %>%
select(var, eval(v), Year, var,Date ) %>%
mutate(time_index = as.yearmon(Date)) %>% # create a time index for the data
# mutate(Month = month.name[Month]) %>%
rename(region = var,
value = eval(v)) %>%
group_by(Year, region, time_index) %>%
#summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
summarise(value = median(value, na.rm = TRUE), .groups = 'drop') %>%
spread(key = region, value = value)
ggseasonplot(
ts(data_xts$rdd, start = c(min(data_xts$Year)), frequency = 12),
polar = TRUE,
year.labels = FALSE,
year.labels.left = FALSE
) +
ylab("Soil moisture") +
ggtitle("Polar seasonal plot: Soil moisture - RDD region") +
theme(legend.position = "none")
ggseasonplot(
ts(data_xts$rvv, start = c(min(data_xts$Year)), frequency = 12),
polar = TRUE,
year.labels = FALSE,
year.labels.left = FALSE
) +
ylab("Soil moisture") +
ggtitle("Polar seasonal plot: Soil moisture - RVV region") +
theme(legend.position = "none")
View(df_sm)
View(df)
unlink("EDA Metereological Data_cache", recursive = TRUE)
library(forecast)
library(fpp2)
library(tidyverse)
library(xts)
library(tsbox)
library(plotly)
library(hrbrthemes)
dataPrep_rdd <- read_csv(file = '../data/dataPrep_meteo_rdd.csv') %>% mutate(var = 'rdd')
dataPrep_rvv <- read_csv(file = '../data/dataPrep_meteo_rvv.csv') %>% mutate(var = 'rvv')
df <-
rbind(dataPrep_rdd, dataPrep_rvv) %>%
mutate(Year = lubridate::year(Date))
df
library(ggplot2)
library(ggridges)
theme_set(theme_minimal())
## ------- function to plot densitys
plot_density_ <- function(df = df, Year = 1041,  v = 'Tmax' , bins = 10) {
df %>%
#filter(var == region, Year < 1940) %>%
filter(Year >= Year) %>%
select(var, eval(v), Year, var) %>%
rename(region = var,
value = eval(v)) %>%
mutate(my_bins = cut(Year, breaks = ceiling(n_distinct(Year) / bins))) %>%
ggplot(aes(
x =  value,
y = as.factor(my_bins),
fill = region,
color = region
)) +
geom_density_ridges(,
alpha = .2) +
#facet_wrap(~region) +
labs(
title = paste('variable', eval(v), 'evolution in ', bins , ' years groups'),
x = eval(v),
y = 'Years'
) +
theme_ipsum()
}
## ------- function to plot time seres
plot_ts_meteo_ <- function(df = df,  v = v, scaleLimits = 5) {
p <-
df %>%
select(var, eval(v), Year, var) %>%
rename(region = var,
value = eval(v)) %>%
group_by(Year, region) %>%
#summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
summarise(value = median(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = scaleLimits ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Median',v,'evolution in both regions'))
# Turn it interactive with ggplotly
ggplotly(p)
}
bins = 9
Year = 1041
v = 'Tmed'
plot_density_(df = df, Year = Year,  v = v , bins = bins)
plot_ts_meteo_(df = df,  v = v, scaleLimits = 5)
bins = 9
Year = 1041
v = 'Rain'
p <-
df %>%
select(var, eval(v), Year, var) %>%
rename(region = var,
value = eval(v)) %>%
group_by(Year, region) %>%
#summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
summarise(value = sum(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = 0 ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Total ',v,' per year in both regions'))
# Turn it interactive with ggplotly
ggplotly(p)
bins = 9
Year = 1041
v = 'Sm'
plot_density_(df = df, Year = Year,  v = v , bins = bins)
plot_ts_meteo_(df = df,  v = v, scaleLimits = 5)
v = 'Sm'
data_xts <-
df %>%
select(var, eval(v), Year, var,Date ) %>%
mutate(time_index = as.yearmon(Date)) %>% # create a time index for the data
# mutate(Month = month.name[Month]) %>%
rename(region = var,
value = eval(v)) %>%
group_by(Year, region, time_index) %>%
#summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
summarise(value = median(value, na.rm = TRUE), .groups = 'drop') %>%
spread(key = region, value = value)
ggseasonplot(
ts(data_xts$rdd, start = c(min(data_xts$Year)), frequency = 12),
polar = TRUE,
year.labels = FALSE,
year.labels.left = FALSE
) +
ylab("Soil moisture") +
ggtitle("Polar seasonal plot: Soil moisture - RDD region") +
theme(legend.position = "none")
ggseasonplot(
ts(data_xts$rvv, start = c(min(data_xts$Year)), frequency = 12),
polar = TRUE,
year.labels = FALSE,
year.labels.left = FALSE
) +
ylab("Soil moisture") +
ggtitle("Polar seasonal plot: Soil moisture - RVV region") +
theme(legend.position = "none")
df_sm <-
df %>%
select(var, eval(v), Year, var, Month) %>%
rename(region = var,
value = eval(v))
df_sm %>%
#mutate(Month = as.yearmon(Date)) %>% # create a time index for the data
group_by(Year, region) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = 0 ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Mean ',v,' per year in both regions')) +
facet_wrap(~region)
df_sm %>%
filter(region == 'rdd') %>%
group_by(Month, region, Year) %>%
summarise(value = mean(value), .groups = 'drop') %>%
ggseasonplot(ts(value, start = c(min(Year)),frequency = 12),
year.labels = TRUE,
year.labels.left = TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
df_sm <-
df %>%
select(var, eval(v), Year, var, Month) %>%
rename(region = var,
value = eval(v))
df_sm %>%
#mutate(Month = as.yearmon(Date)) %>% # create a time index for the data
group_by(Year, region) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = 0 ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Mean ',v,' per year in both regions')) +
facet_wrap(~region)
df_sm %>%
filter(region == 'rdd') %>%
group_by(Month, region, Year) %>%
summarise(value = mean(value), .groups = 'drop') %>%
ggseasonplot(ts(value, start = c(min(Year)),frequency = 12),
year.labels = TRUE,
year.labels.left = TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
df_sm <-
df %>%
select(var, eval(v), Year, var, Month) %>%
rename(region = var,
value = eval(v))
df_sm %>%
#mutate(Month = as.yearmon(Date)) %>% # create a time index for the data
group_by(Year, region) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = value, fill = region, color = region)) +
geom_line( ) +
expand_limits(y = 0 ) +
ylab(v) + xlab('year') +
theme_ipsum() +
labs(title = paste('Mean ',v,' per year in both regions')) +
facet_wrap(~region)
# df_sm %>%
#   filter(region == 'rdd') %>%
#   group_by(Month, region, Year) %>%
#   summarise(value = mean(value), .groups = 'drop') %>%
#   ggseasonplot(ts(value, start = c(min(Year)),frequency = 12),
#                year.labels = TRUE,
#                year.labels.left = TRUE) +
#   ylab("$ million") +
#   ggtitle("Seasonal plot: antidiabetic drug sales")
# Turn it interactive with ggplotly
#ggplotly(p)
## The xts() function creates a time series object. The order.by parameter uses the dates from the data, which are converted to R Date objects by the as.Date() function.
historical_rdd = xts(df_rdd[,c("Tmed", 'Rain')], order.by=as.Date(df_rdd$Year, df_rdd$Month ))
# ## The xts() function creates a time series object. The order.by parameter uses the dates from the data, which are converted to R Date objects by the as.Date() function.
#
# historical_rdd = xts(df_rdd[,c("Tmed", 'Rain')], order.by=as.Date(df_rdd$Year, df_rdd$Month ))
#
# plot(historical_rdd$Tmed)
#
# ## The ts_regular() function gives the time series a regular (daily) interval by adding NA values for missing dates. A regular interval will be needed later for decomposition analysis.
#
# historical_rdd = ts_regular(historical_rdd)
#
#
# ## The na.fill() function fills in those missing dates by duplicitating (extending) values from previous days.
#
# historical_rdd = na.fill(historical_rdd, "extend")
#
# ## The window() function clips off the starting and ending dates so the number of years covered is a multiple of four. This will be needed later when the data needs to be aggregated into monthly periods.
#
# historical_rdd = window(historical_rdd, start=as.Date("2000-01-01"), end=as.Date("2020-12-31"))
library(forecast)
library(fpp2)
library(tidyverse)
library(tseries)
library(plotly)
library(hrbrthemes)
library(readr)
library(viridis)
library(forcats)
library(kableExtra)
library(knitr)
library(forecast)
library(fpp2)
library(tidyverse)
library(tseries)
library(plotly)
library(hrbrthemes)
library(readr)
library(viridis)
library(forcats)
library(kableExtra)
library(knitr)
dataPrep_rdd <-
read_rds(file = '../data/dataPrep_production_rdd.csv') %>%
mutate(var = 'rdd', Wine_mhl = as.double(Wine_mhl) )
getwd()
dataPrep_rdd <-
read.csv(file = '../data/dataPrep_production_rdd.csv') %>%
mutate(var = 'rdd', Wine_mhl = as.double(Wine_mhl) )
dataPrep_rvv <-
read.csv(file = '../data/dataPrep_production_rvv.csv') %>%
mutate(var = 'rvv',  DOY_Fs = 0, Wine_mhl = as.double(Wine_mhl))
df_prd <- rbind(dataPrep_rdd, dataPrep_rvv)
df_prd
ts.rdd <- ts( dataPrep_rdd$Wine_mhl, start = c(min(dataPrep_rdd$Year) ), frequency = 1)
ts.rvv <- ts( dataPrep_rvv$Wine_mhl, start = c(min(dataPrep_rvv$Year) ), frequency = 1)
str(ts.rdd)
str(ts.rvv)
# convert the time series to data frames with a date column
df1 <- data.frame(Date = time(ts.rdd), Value1 = ts.rdd)
df2 <- data.frame(Date = time(ts.rvv), Value2 = ts.rvv)
# left join the two data frames based on the Date column
df_joined <- left_join(df1, df2, by = "Date")
# plot wine production fro the two regions
ggplot(df_joined, aes(x = Date)) +
geom_line(aes(y = Value1, color = "Rdd")) +
geom_line(aes(y = Value2, color = "Rvv")) +
labs(title = "Wine production from RDD and RVV regions", x = "Date", y = "Value", subtitle = 'values in Mhl') +
scale_color_manual(values = c("Rdd" = "#00AFBB", "Rvv" = "#E7B800")) +
scale_y_continuous(expand = c(0, 0), limits = c(0,NA)) +
theme_bw()
# plot wine production RVV with regulation year
ggplot(df_joined, aes(x = Date)) +
geom_line(aes(y = Value2, color = "Rvv")) +
labs(title = "Wine production from  RVV regions", x = "Date", y = "Value", subtitle = 'values in Mhl') +
scale_color_manual(values = c( "Rvv" = "#E7B800")) +
scale_y_continuous(expand = c(0, 0), limits = c(0,NA)) +
geom_vline(xintercept = 1986) +
theme_bw()
# create plotly line chart
df_joined %>%
plot_ly( x = ~Date, y = ~Value1, type = "scatter", mode = "lines", name = "Rdd") %>%
add_trace(y = ~Value2, name = "Rvv") %>%
layout(title = "Wine production from RDD and RVV regions",
xaxis = list(title = "Date"),
yaxis = list(title = "Production Mhl", range = c(0, max(df_joined[,2:3], na.rm = TRUE))))
## rdd plots  ----------------------
#autoplot(ts.rdd, main = 'Wine production for RDD region in Mhl')
autoplot(ts.rdd)+
geom_smooth() +
expand_limits(y = 0) +
labs('Wine production for RDD region in Mh',
y = "Wine Production in Mhl (in thousands)",
x = NULL)
x <- ts.rdd
# # lag plot of the series
# gglagplot(x)
# ACF plot of the series
ggAcf(x, lag.max = 34)
autoplot(ts.rvv)+
geom_smooth() +
expand_limits(y = 0) +
labs('Wine production for RVV region in Mh',
y = "Wine Production in Mhl (in thousands)",
x = NULL)
x <- ts.rvv
# # lag plot of the series
# gglagplot(x)
# ACF plot of the series
ggAcf(x, lag.max = 34)
# Perform the ADF test
adf.test(ts.rdd)
# Perform the KPSS test
kpss.test(ts.rdd, null = 'Trend')
# Perform the ADF test
adf.test(na.exclude(ts.rvv))
# Perform the KPSS test
kpss.test(na.exclude(ts.rvv), null = 'Trend')
# https://r-graph-gallery.com/density_mirror_ggplot2.html
df_prd %>% select(var,DOY_BB,DOY_Fl, DOY_sM,DOY_Hv) %>%
gather(key = key, value = value,- var) %>%
group_by(var, key) %>%
summarise(#min = min(value),
#max = max(value),
median = median(value),.groups = 'drop') %>%
spread(key = var,value = median) %>%
rename(median_rdd = rdd,
median_rvv = rvv) %>%
kable() %>% kableExtra::kable_minimal()
#add_header_above(c(" ", "Hello" = 2, "World" = 2))
df_prd %>%
select(- Wine_mhl, - DOY_Fs) %>%
rename(Region = var) %>%
# mutate(index = row_number()) %>%
gather(key = variable, value = value, -Region, -Year) %>%
spread(key = Region,value = value) %>%
ggplot() +
# Top
geom_density( aes(x = rdd, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=40, y=0.01, label="rdd"), color="#69b3a2") +
# Bottom
geom_density( aes(x = rvv, y = -..density..), fill= "#404080") +
geom_label( aes(x=320, y=-0.01, label="rvv"), color="#404080") +
theme_ipsum() +
theme(
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("") +
labs(title = 'Distribution of days of year for several events') +
facet_wrap(~variable)
## a function to plot the densitys
plot_densitys <- function(df_prd, x, x_label) {
df_prd %>%
select(Year, var,eval(x)) %>%
rename(value = eval(x), region = var) %>%
# mutate(index = row_number()) %>%
spread(key = region, value = value) %>%
ggplot() +
# Top
geom_density( aes(x = rdd, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=80, y=0.05, label="rdd"), color="#69b3a2") +
# Bottom
geom_density( aes(x = rvv, y = -..density..), fill= "#404080") +
geom_label( aes(x=300, y=-0.05, label="rvv"), color="#404080") +
theme_ipsum() +
theme(
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlab("") +
labs(title = paste('Days of year for', x_label))
}
